---
title: "gtaptools"
author: ""
date: today
format:
  bookup-html:
    embed-fonts: false
toc: true
editor: 
  markdown: 
    wrap: 72
---

# Introduction

Welcome to the tutorial for the *gtaptools* package in R, which is
currently under development. The primary objective of this material is to
provide practical examples of using the *gtaptools* package for
researchers during the development of research with Computable General
Equilibrium (CGE) models.

The package aims to improve file management, increase the productivity,
and allow do build a scriptable pipeline that promote the
reproducibility. Also, the package provides tools to graphical
visualizations that increase the analytical potential of the database
and results. From a broader perspective, this package is part of a
long-term agenda that involves the development of tools to bring the
functionality and flexibility of the R language to CGE modeling, such as
the [HARr](https://github.com/USDA-ERS/MTED-HARr) and
[TabloToR](https://github.com/USDA-ERS/MTED-TabloToR) projects[^1].

[^1]: [M. Ivanic, The GTAP model in R, 2020, 23rd Annual Conference on
    Global Economic
    Analysis.](https://www.gtap.agecon.purdue.edu/resources/download/10028.pdf)

The *gtaptools* package is designed to be user-friendly and is
accompanied by detailed [documentation](https://github.com/tsimonato/gtaptools/manual/gtaptools_0.1.0.pdf) and example code built-in that can
be explored in Rstudio. We hope that this manual will serve as an
auxiliary practical support to users and welcome community feedback and
contributions.

```{r}
#| label: setup
#| include: false

library(knitr)
```

# Installation

To use the *gtaptools* package, it's necessary to have R installed on
your computer, which can be downloaded from
[here](https://www.r-project.org/). Additionally, we recommend
downloading RStudio, available at
[here](https://posit.co/download/rstudio-desktop/), which provides a
user-friendly interface to work with R.

You can install the development version of *gtaptools* from
[GitHub](https://github.com/) with:

```{r}
#| label: install
#| echo: true
#| eval: false

# If the devtools package is not already installed, please run the disabled line below.
# install.packages("devtools")
devtools::install_github("tsimonato/gtaptools")

```

## Compatibility

The tools of the package mainly works with files in *.har*, *.sl4* and
other formats generated by the
[GEMPACK](https://www.copsmodels.com/gempack.htm), which is widely used
in CGE modeling[^2]. As a result, some of the package's functionalities
require a certain degree of familiarity with the structure of the data
used in the GEMPACK suite[^3]. This knowledge is not necessary for users
to take full advantage of the package's capabilities in manipulating and
visualizing CGE model data, but increase the learning curve.

[^2]: Many applications can be found at [GTAP
    portal](https://www.gtap.agecon.purdue.edu/models/research.asp)

[^3]: A detailed technical description of the GEMPACK software can be
    found in its [manual](https://www.copsmodels.com/gpmanual.htm).

The package also includes functions for data cleaning, manipulation, and
visualization that can be used with other data format, like R
data.frames and arrays. Also, although GEMPACK is only compatible with
Windows OS, the package's features work on other OS supported by R and
Rstudio such as Linux and MacOS.

# Tools

This section of the manual provides a comprehensive overview of the
package's tools organized by their individual functionalities. The
functions are categorized into four topics: Tools, Data and file
management, Data viz (Static and Reactive), and Report automation. Each
topic is further divided into subtopics that describe the specific
functions and their intended use cases. Understanding the package's
functions can help users streamline their data analysis workflows and
create effective visualizations and reports.

## Data and file managment

#### har_shape

The *gtaptools::har_shape* is a highly efficient and valuable tool for
binding databases and modifying headers in data.frame or array format.
This function lets users combine various databases quickly and easily
while generating new variables using custom calculations. This function
is especially useful for integrating *.har* databases with other bases
in the R environment, providing a versatile solution for analysts who
need to work with different classes of datasets.

::: {.callout-note title="What this tool does:"}

-   Read and combines .har files, arrays and dataframes.
-   Create/change headers from calculations.
-   Write headers to disk.
:::

In general, the execution of the function follows three steps:

A.  Create a list of the datasets that must be combined (*input_data*).
B.  Create a list with the calculations that will be executed
    (*new_calculated_vars*).
C.  Execute the function defining if any headers should be deleted
    (*del_headers*), and if and where the sets (*export_sets*) and the
    numerical database (*output_har_file*) should be saved.

Let's assume we want the following:

```{r}
#| label: har_shape1
#| echo: true
#| eval: false

path_to_har <- gtaptools::templates("oranig_example.har")

 input_data <- list( 
    path_to_har, # Path to .har database # <1>
    list(
      input_data = gtaptools::example_df, # Data.frame
       # Description of tha header that will be created by data.frame
      header = quote(`1MAR`[c("COM", "SRC", "IND", "MAR")])
    )
 )

output_har_r <- 
  gtaptools::har_shape(
    input_data = input_data,
    new_calculated_vars = NULL,  # <2>
    output_har_file = "gtaptools_shape_example1.har"# <3>
  )



```

1.  Combine a database in *.har* format on disk with a data.frame which
    generates the 1MAR header with "COM", "SRC", "IND" and "MAR" sets.
2.  No calculation is done to generate/change headers.
3.  Writes the output to "gtaptools_shape_example_pf.har" and returns it
    the list object output_har_r to R environment.

::: callout-caution
The data.frames and arrays used as input (1) must contain columns with
names that correspond to the mentioned sets and, in the case of
data.frames, the column with the numerical values of the data frame must
have the name of the header that will be generated (1MAR in this
example).
:::

Therefore, to generate `1MAR[c("COM", "SRC", "MAR")]` the data.frame used has columns (categorical) that correspond to the sets and a columns (numerical) that correspond to name of the header. Take a look at the first 20 lines of this data.frame below.

```{r}
#| label: har_shape2
#| echo: true
#| eval: true

DT::datatable(gtaptools::example_df[1:20,])

```


Now let's assume another scenario.

```{r}
#| label: har_shape3
#| echo: true
#| eval: false

path_to_har <- gtaptools::templates("oranig_example.har")

 input_data <- list( # <1>
    path_to_har # Path to .har database # <1>
 )

new_calculated_vars <- list( # <2>
   quote(MARC["COM"] := `1MAR`), # Sum 1MAR to set COM
   quote(MULT[c("REG", "HOU")] := solve(MAKE)), # Solve the MAKE matrix
   quote(NSET := c("Comm1", "Comm2")) # Create sets
)

output_har_r <- 
  gtaptools::har_shape(
    input_data = input_data,
    new_calculated_vars = new_calculated_vars, 
    del_headers = c("1LND"),
    export_sets = "gtaptools_shape_example2_sets.har", # <3>
    output_har_file = "gtaptools_shape_example2.har"
)



```

1.  Reads a *.har* from disk as input.
2.  Generates the MARC header, the aggregation by sum to COM of 1MAR.
    Generates MULT, with REG and HOU sets, which is the inverse matrix
    of the MAKE header. Creates set header NSET consisting of "Comm1" and
    "Comm2" elements.
3.  Deletes the 1LND header. Saves sets and numeric headers in different
    files.

::: callout-caution
Note the syntax adopted in the formulas. Properly using square brackets,
:= (and not = ), and encapsulating the formula inside quote() is
indispensable.
:::

The aggregation performed on `MARC["COM"] := 1MAR` is defined by the set indicated for the output header. Since the 1MAR header is composed of 4 sets (COM, SRC, IND, MAR) and the output is composed of only 1 (COM), the tool automatically aggregates the output to COM.

Calculations are being done between arrays in this tool, and R offers a vast range of possibilities of functions for manipulating arrays. It can be applied, for example, *if* statements and intermediate aggregation of sets as commonly adopted in GEMPACK scripts.

```{r}
#| label: har_shape4
#| echo: true
#| eval: false



path_to_har <- gtaptools::templates("oranig_example.har")

 input_data <- list( # <1>
    path_to_har # Path to .har database # <1>
 )

new_calculated_vars <- list( 
   quote(SHRM[c("COM", "IND")] := MAKE/apply(MAKE, c("COM"), sum)), # <2>
   quote(IFMA[c("COM", "IND")] := MAKE + ifelse(MAKE > 10, MAKE*2, MAKE)), # <3>
   quote(IFMS[c("COM")] := apply(IFMA, c("COM"), mean)) # <4>
)

output_har_r <- 
  gtaptools::har_shape(
    input_data = input_data,
    new_calculated_vars = new_calculated_vars, 
    del_headers = NULL,
    export_sets = F, # <5>
    output_har_file = "gtaptools_shape_example3.har"
)


```

1. Reads a *.har* from disk as input.
2. Creates SHRM which is the Share of MAKE by COM.
3. Creates IFMA which is the MAKE multiplied by 2 if the value is > 10.
4. Creates IFMA which is the aggregation by mean of IFMA for COM.
5. Saves the .har file without including the sets (*export_sets = F*).

In the calculation in (1), the chunk `apply(MAKE, c("COM"), sum)` simply aggregates by sum the MAKE to COM, while in (3) `apply(IFMA, c("COM"), mean)` aggregates by mean IFMA to COM.

Notice that the IFMA header was created and used as an input in the following formula. It is possible due to the sequential way the calculations are processed in the tool. Therefore, it is necessary to follow this sequence: creates > use as input.


## Data viz

### Static

### Reactive

## Report automation

# Putting it all together to

## GTAP

## SIMPLE/SIMPLE-G

## TERM

# References

# Acknowledgements

```{r}
#| label: sh
#| echo: true
#| eval: true
say_hello <- function(name) {
    paste("Hello,", name, "!") # <1>
}

say_hello("world") # <2>
```

1.  Quite an original example.
2.  This is were all the action is happening.

### Verbatim

Here is the structure of the `penguins` dataset.

```{r}
#| label: penguins_str
#| echo: true
library(palmerpenguins)
str(penguins)
```

### Tables

Sample table output.

```{r}
#| label: table
tab <- table(penguins$island, penguins$species)
kable(tab)
```

Sample `DT:datatable` output.

```{r}
#| label: dt
library(DT)
DT::datatable(penguins)
```

# Styling

A simple list :

-   one mississipi
-   two mississipi
-   three mississipi

A blockquote :

> Oh ! What a nice blockquote you have here. Much more wonderful than a
> classical lorem ipsum, really.

And we could also [include links](https://www.r-project.org/) or simply
URLs like this : <https://www.r-project.org/>.

An incredibly complex equation :

$$ y = \sqrt{\frac{1}{x + \beta}} $$

# Figures

Here is an histogram.

```{r}
#| label: hist
library(ggplot2)
ggplot(data = penguins) +
    geom_histogram(aes(x = body_mass_g)) +
    facet_grid(rows = vars(species))
```

And a wonderful scatterplot, with a caption.

```{r}
#| label: scatter
#| fig.cap: "This is a scatterplot"
ggplot(data = penguins) +
    geom_point(
        aes(x = bill_length_mm, y = bill_depth_mm)
    )
```

# Callouts

::: callout-note
This is a note callout.
:::

::: callout-warning
This is a warning callout
:::

::: callout-important
This is an important callout
:::

::: callout-caution
This is a caution callout
:::

::: callout-tip
This is a tip callout.With a bit of `code`.
:::

# Tabset

::: panel-tabset
## First tab

This is the first tab content.

## Second tab

This is the second tab content.
:::
