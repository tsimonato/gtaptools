% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/har_shape - Copy.R, R/har_shape.R
\name{har_shape}
\alias{har_shape}
\title{Merge and generate new headers.}
\usage{
har_shape(
  input_data,
  new_calculated_vars = NULL,
  del_headers = NULL,
  export_sets = NULL,
  output_har_file = NULL
)

har_shape(
  input_data,
  new_calculated_vars = NULL,
  del_headers = NULL,
  export_sets = NULL,
  output_har_file = NULL
)
}
\arguments{
\item{input_data}{It must consist of one or more input databases, which must be separated from each other by sublists (see example). In the case of multiple databases, all will be combined for the final output.Arrays and data.frames must be inside sublists (list(....)) as indicated in the examples section. Aggregations on input data can only be performed on single array and data.frame inputs.}

\item{new_calculated_vars}{New variables resulting from custom calculations between the headers contained in input_data. Each variable's parameters must be informed (it can be *x, y, z ...*), the function *fun* that represents the calculation to be done, the *new_header_name*, and the *sets* for the output structure. The different headers must have at least one similar set so that it is possible to establish correspondence between them. Please note the example section.}

\item{del_headers}{Vector of characters with the names of headers that must be excluded from the output.}

\item{export_sets}{If an output .har file is indicated, it will be created and exported to that .har file. If FALSE, they will not be exported.}

\item{output_har_file}{Output .har file name.}
}
\description{
Allows the combination of different databases in data.frame or array format. Generate new variables flexibly from custom functions. Calculations can be performed between headers/variables of different dimensions/sets.

Allows the combination of different databases in data.frame or array format. Generate new variables flexibly from custom functions. Calculations can be performed between headers/variables of different dimensions/sets.
}
\note{
Bear in mind that, for performance reasons, before carrying-out custom calculations between different Headers with different sets, the function aggregates all headers involved in the computation to the output set. That is, in a MAKE(COM, IND)/1CAP(COM) division operation, the first operation is the aggregation for MAKE(COM), and only then is the division calculation processed. 
Therefore, for example, a weighted average aggregation cannot be done directly. It is recommended to use the agg_har function in this case.

Bear in mind that, for performance reasons, before carrying-out custom calculations between different Headers with different sets, the function aggregates all headers involved in the computation to the output set. That is, in a MAKE(COM, IND)/1CAP(COM) division operation, the first operation is the aggregation for MAKE(COM), and only then is the division calculation processed.
Therefore, for example, a weighted average aggregation cannot be done directly. It is recommended to use the agg_har function in this case.
}
\examples{
# example code

# -Reads list_df, a list of input data (data.frame(1), list of arrays(2), array(3)) >
# -Aggregates the input (1) for "MAR1" in 3 sets by simple addition (default) >
# -Aggregates the input(3) for "XPLC" into 1 set per average >
# -Deletes headers "MAR1" and "3pur" >
# -Saves the output in a .har file ("gtaptools_shape_example1.har") >
# -Returns the list of "binded_df" arrays.

list_df <- list(
 list(
   input_data = gtaptools::example_df, # 1 - data.frame
   sets = c("COM", "SRC", "MAR"), # sum on IND
   col_values = "Freq",
 new_header_name = "MAR1"
),
gtaptools::example_arrays_har, # 2 - list of arrays
 list(
   input_data = gtaptools::example_arrays_har$xplh, # 3 - array
   sets = c("COM"), # sum in HOU,
   fun = function(x) mean(x),
   new_header_name = "XPLC"
)
) 

binded_df <-
  gtaptools::har_shape(
    input_data = list_df,
    del_headers = c("MAR1", "3pur"),
    output_har_file = "gtaptools_shape_example1.har"
  )


















# example code

# -Reads list_df, a list of input data (data.frame(1), list of arrays(2), array(3)) >
# -Aggregates the input (1) for "MAR1" in 3 sets by simple addition (default) >
# -Aggregates the input(3) for "XPLC" into 1 set per average >
# -Deletes headers "MAR1" and "3pur" >
# -Saves the output in a .har file ("gtaptools_shape_example1.har") >
# -Returns the list of "binded_df" arrays.

list_df <- list(
 list(
   input_data = gtaptools::example_df, # 1 - data.frame
   sets = c("COM", "SRC", "MAR"), # sum on IND
   col_values = "Freq",
 new_header_name = "MAR1"
),
gtaptools::example_arrays_har, # 2 - list of arrays
 list(
   input_data = gtaptools::example_arrays_har$xplh, # 3 - array
   sets = c("COM"), # sum in HOU,
   fun = function(x) mean(x),
   new_header_name = "XPLC"
)
)

binded_df <-
  gtaptools::har_shape(
    input_data = list_df,
    del_headers = c("MAR1", "3pur"),
    output_har_file = "gtaptools_shape_example1.har"
  )


















}
